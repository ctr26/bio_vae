# Import necessary modules
import os
screen_name = 'idr0093-mueller-perturbation/screenA'


rule all:
    conda:
        "enviroment.yaml"
    input:
        glob_wildcards("results/{image_id}.tif",image_id=image_ids)


# rule all:
#     conda:
#         "enviroment.yaml"
#     input:
#         expand("results/{{image_id}}/{z}_{c}_{t}.tiff", image_id=image_ids)

checkpoint generate_image_ids:
    # input: 
    conda:
        "enviroment.yaml"
    output:
        image_ids
    run:
        from idr_funs import get_image_ids_by_screen
        from idr import connection     
        conn = connection('idr.openmicroscopy.org')
        image_ids = get_image_ids_by_screen(conn,screen_name)

rule download_image:
    input:
        "results/{image_id}/{z}_{c}_{t}.tif"
    output:
        os.path.join(output_dir, '{image_id}.tif')
    conda:
        "enviroment.yaml"
    run:
        pixels = image.getPrimaryPixels()
        pixels.save(output, format='ome.tiff', z=0, t=0, c=0)

        download_image(conn, image_id, output_file)

rule download_plane:
    input:
        directory('results/{image_id}/')
    output:
        touch("results/{image_id}/{z}_{c}_{t}.tif")
    conda:
        "enviroment.yaml"
    run:
        from idr import connection     
        conn = connection('idr.openmicroscopy.org')
        z = image.getSizeZ()
        c = image.getSizeC()
        t = image.getSizeT()




# zct_list = []
# for z in range(size_z, size_z):     # get the top half of the Z-stack
#     for c in range(size_c):          # all channels
#         for t in range(size_t):      # all time-points
#             zct_list.append((z, c, t))

# planes = pixels.getPlanes(zct_list)
# for i, p in enumerate(planes):
#     print("plane zct:", zct_list[i], " min:", p.min(), " max:", p.max())




# # Define a rule to download all images
# rule download_all_images:
#     input:
#         os.path.join(input_dir, 'image_ids.txt')
#     output:
#         os.path.join(output_dir, 'done.txt')
#     run:
#         input_file = str(input[0])
#         output_file = str(output[0])
#         download_images(input_file, output_dir)
#         # Create an empty file to indicate that the download is complete
#         open(output_file, 'w').close()

# # Define a rule to generate the list of image IDs
# rule generate_image_ids:
#     output:
#         os.path.join(input_dir, 'image_ids.txt')
#     run:
#         output_file = str(output[0])
#         # Get a list of all image IDs in the experiment
#         image_ids = images.list_images(conn, experiment_id)
#         # Write the list of image IDs to the output file
#         with open(output_file, 'w') as f:
#             f.write('\n'.join(image_ids))

# # Define a rule to collect all downloaded images using a wildcard glob
# rule collect_images:
#     output:
#         os.path.join(output_dir, '*.tif')
#     shell:
#         """
#         mkdir -p {output_dir}
#         mv {output_dir}/*.TIF {output_dir}/*.tif
#         """

# # Define an all rule to run all rules
# rule all:
#     input:
#         os.path.join(output_dir, 'done.txt')
#     output:
#         os.path.join(output_dir, '*.tif')
#     run:
#         pass